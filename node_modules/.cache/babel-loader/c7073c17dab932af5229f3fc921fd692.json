{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lanre\\\\Documents\\\\GitHub\\\\my_builderapp\\\\src\\\\containers\\\\Builder\\\\BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Auxillary';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        bacon: 0,\n        cheese: 0,\n        meat: 0,\n        salad: 0\n      },\n      totalPrice: 4,\n      purchasable: false\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceDeduction = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceDeduction;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n    };\n  }\n\n  updatePurhaseState() {\n    const ingredients = { ...this.state.ingredients\n    }; // create an array from ingredients constant which takes a copy of current ingredients state.\n\n    const sum = Object.keys(ingredients).map(igKey => {\n      // use map array into array which recieves key and replace old value with new value it returns\n      return ingredients[igKey];\n    });\n  } // controls to add or remove ingredients \n\n\n  render() {\n    const disabledInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Burger, {\n      ingredients: this.state.ingredients,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(BuildControls, {\n      ingredientAdded: this.addIngredientHandler,\n      ingredientRemoved: this.removeIngredientHandler,\n      disabled: disabledInfo,\n      price: this.state.totalPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["C:/Users/lanre/Documents/GitHub/my_builderapp/src/containers/Builder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","priceAddition","oldPrice","newPrice","setState","removeIngredientHandler","priceDeduction","updatePurhaseState","sum","Object","keys","map","igKey","render","disabledInfo","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Aux from '../../hoc/Auxillary';\r\nimport Burger from '../../components/Burger/Burger';\r\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\r\n\r\nconst INGREDIENT_PRICES = {\r\n  salad : 0.5,\r\n  cheese: 0.4,\r\n  meat: 1.3,\r\n  bacon: 0.7\r\n}\r\n\r\nclass BurgerBuilder extends Component {\r\n\r\n // constructor(props){\r\n  //  super(props);\r\n  //  this.state = {...}\r\n // }\r\n\r\n   state = {\r\n        ingredients: {\r\n          bacon: 0,\r\n          cheese:0,\r\n          meat: 0,\r\n          salad: 0\r\n        },\r\n        totalPrice: 4,\r\n        purchasable: false\r\n   }\r\n\r\n   updatePurhaseState (){\r\n     const ingredients = {\r\n       ...this.state.ingredients\r\n     };\r\n     // create an array from ingredients constant which takes a copy of current ingredients state.\r\n     const sum = Object.keys(ingredients)\r\n                 .map(igKey=> {\r\n                   // use map array into array which recieves key and replace old value with new value it returns\r\n                   return ingredients[igKey]\r\n                 });\r\n   }\r\n\r\n   // controls to add or remove ingredients \r\n\r\n   addIngredientHandler = (type) => {\r\n      const oldCount = this.state.ingredients[type];\r\n      const updatedCount = oldCount +1;\r\n      const updatedIngredients = {\r\n        ...this.state.ingredients\r\n      };\r\n      updatedIngredients[type] = updatedCount;\r\n      const priceAddition = INGREDIENT_PRICES[type];\r\n      const oldPrice = this.state.totalPrice;\r\n      const newPrice = oldPrice + priceAddition;\r\n      this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\r\n   }\r\n\r\n   removeIngredientHandler = (type) => {\r\n    const oldCount = this.state.ingredients[type];\r\n    if(oldCount <= 0){\r\n      return;\r\n    }\r\n    const updatedCount = oldCount -1;\r\n    const updatedIngredients = {\r\n      ...this.state.ingredients\r\n    };\r\n    updatedIngredients[type] = updatedCount;\r\n    const priceDeduction = INGREDIENT_PRICES[type];\r\n    const oldPrice = this.state.totalPrice;\r\n    const newPrice = oldPrice - priceDeduction;\r\n    this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\r\n   }\r\n\r\n  render() {\r\n    const disabledInfo = {\r\n      ...this.state.ingredients\r\n    };\r\n    for (let key in disabledInfo){\r\n      disabledInfo[key] = disabledInfo[key] <= 0\r\n    }\r\n    return (\r\n      <Aux>\r\n        <Burger ingredients = { this.state.ingredients} />\r\n        <BuildControls  ingredientAdded={this.addIngredientHandler}\r\n         ingredientRemoved={this.removeIngredientHandler}\r\n          disabled = {disabledInfo}\r\n          price = {this.state.totalPrice}\r\n        />\r\n      </Aux>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BurgerBuilder;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}